// Part A: Stock Collection Operations

// 1. Create an index on the company field in the stocks collection
db.Stock.createIndex({ "company": 1 });

// 2. Create a compound index on the sector and sales fields in the stocks collection
db.Stock.createIndex({ "sector": 1, "sales": 1 });

// 3. List all the indexes created on the stocks collection
print("Indexes in the 'Stock' collection:");
printjson(db.Stock.getIndexes());

// 4. Drop an existing index on the company field from the stocks collection
// (Replace 'company_1' with the actual index name if it's different)
db.Stock.dropIndex("company_1");

// 5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document
print("Iterating over documents in the 'Stock' collection:");
var cursor = db.Stock.find();
cursor.forEach(function(doc) {
   printjson(doc);
});

// 6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection
print("Limiting the cursor to 3 documents:");
cursor = db.Stock.find().limit(3);
cursor.forEach(function(doc) {
   printjson(doc);
});

// 7. Sort the documents returned by a cursor in descending order based on the sales field
print("Sorting the cursor by sales in descending order:");
cursor = db.Stock.find().sort({ "sales": -1 });
cursor.forEach(function(doc) {
   printjson(doc);
});

// 8. Skip the first 2 documents in the result set and return the next documents using the cursor
print("Skipping the first 2 documents and returning the next:");
cursor = db.Stock.find().skip(2);
cursor.forEach(function(doc) {
   printjson(doc);
});

// 9. Convert the cursor to an array and return all documents from the stocks collection
print("Converting the cursor to an array and returning all documents:");
var allDocuments = db.Stock.find().toArray();
printjson(allDocuments);

// 10. Create a collection named "Companies" with schema validation to ensure that each document contains a company field (string) and a sector field (string)

db.createCollection("Companies", {
   validator: {
      $jsonSchema: {
         bsonType: "object",
         required: ["company", "sector"],
         properties: {
            company: {
               bsonType: "string",
               description: "Company field must be a string"
            },
            sector: {
               bsonType: "string",
               description: "Sector field must be a string"
            }
         }
      }
   }
});

print("Schema validation for 'Companies' collection created.");
